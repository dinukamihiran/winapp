<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhzAFFAYMAAAAAAP///+7u7t3d3czMzLu7u6qqqpmZmYiIiHd3d2ZmZv///wAAAAAAAAAAAAAA
        ACH/C05FVFNDQVBFMi4wAwEBAAAh+QQBAAALACwAAAAAzAFFAQAIrgADCBxIsKDBgwgTKlzIsKHDhxAj
        SpxIsaLFixgzatzIsaPHjyBDihxJsqTJkyhTqlzJsqXLlzBjypxJs6bNmzhz6tzJs6fPn0CDCh1KtKjR
        o0iTKl3KtKnTp1CjSp1KtarVq1izat3KtavXr2DDih1LtqzZs2jTql3Ltq3bt3Djyp1Lt67du3jz6t3L
        t6/fv4ADCx5MuLDhw4gTK17MuLHjx5AjS55MubLly5gza0jezLmz58+gQ4seTbq06dOoU6tezbq169ew
        Y8ueTbu27du4c+vezbu379/AgwsfTry48ePIkytfzry58+fQo0ufTr269evYs2s53869u/fv4MOLH0++
        vPnz6NOrX8++vfv38OPLn0+/vv37+PPr38+/v///AAYo4IAEFmjggQgmqOCCMww26OCDEEYo4YQUVmjh
        hRhmqOGGHHbo4YcghijiiCSWaOKJKKao4oostujiizDGKOOMNC7WaOONOOao44489ujjj0AGKeSQRBZp
        5JFIJqnkkkw26eSTUEYp5ZRUVmnllVhmvqnlllx26eWXXAlAwJgECCAAmGIJYEACCCBwgAEFDGAmml8Z
        oMCdCbB5AAED0OmVAAncKagCb/bpJ1cDBCronod+BaigCJzZ6FeKEjopWHbeacClji7KaZ0K5Cnpp1zl
        mcCmpIZpqqGpalWAqa1y9aqbF40aK1BrnmrRnLcGZUCbB+zKa68+zYoqRWbaSuxOBLSJgLDKLpuTAM6y
        KlGy0vrkbAHICiBntj0V4OYB0TY0gJzlglsTtQccwG1E3p60q2647boLUbzfzsuTAfW+y5CY51qr77T1
        wsnQAGPKO3BPar5pgAFlGuQtmXwu/JMABTj8cAEUF+AxmQJbzBMBD8MJp8cok5muyMwWcDLKH4fMMlDx
        JrzyzDjnrPPOPPfs889ABy300EQXTdawKmErkNJGFyRAuzeL1C4BA03dtMRQs2S1QFtfPdDT5GrN6NJR
        Dw122SB17fVBZ/8LM0Jivi0xAR732fWYkiLc5wAoRxt3nAHg/71w2wplXK/aARh++AHWDrC44VRzPXbG
        Hi/e+OL8jq0v4QgZzrHirBLQLsck1/t1uxCLXm/kAWyt+OemL436mIezPi/nBjnO+OntVq154lkHwK+/
        YGvuerusGi7p8Lz/ri7uBWV8rEC652174FmDfbnxk/c+UPUBaE+Q7teDCz1BiLfuvJl0Z36m7gZ1fby/
        4WcNf0HpZ3u+7+XfvXi9Z1Jd/LgXOcoRpG0CxJ/zzBe8g6TveP2qXNgSiD4CCsSAvAug9ypYPv01cID0
        q9/uwBYxgajufR9UH+vmd0D7fZCEg0shQQxXkARS8ILZUxv5+IdD+hFudARRXQeltT/qoa2Od+9SXegA
        iMPdhS9zK+yeD4MHOSOqDWlMCx/aslS8/3VvdJkLmwjfpLitFQ9OteMh8KYoxi4ujnU37FoRu+TGNw5E
        df2yle76pT5/7RFq8pNiC8UYPsUZAIYm3KAKMzipZDkyi+FTGdskqUVlISxyWBwVJJFGNkkh72uZdNoW
        1/aQpx1ykKMkJUjAdsonvkmVMCnj4VIJS5DgcXS0rGVIIKnLXvryl8AMpjCHSSfMYhrzmMhMpjKXycxm
        OvOZ0IymNKdJzWpa85rYzKY2t8nNbnrzm+AkDKc4x0nOcprznOhMpzrXyc52uvOd8IynPOdJz3ra8574
        zKc+IvfJz376858ADahAB0rQghr0oAhNqEIXytCGOvShEI2oRCchStGKWvSiGM2oRjfK0Y569KMgDalI
        R0rSkpr0pChNqUpXE8rSlrr0pTCNqUxnStOa2nRgAQEAOw==
</value>
  </data>
</root>